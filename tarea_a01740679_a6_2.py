# -*- coding: utf-8 -*-
"""Tarea A01740679_A6.2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zZIcVPgP0N-FANnGoKbT9qs9ha6s9fqB
"""

import json
from datetime import datetime
import unittest
from google.colab import drive


# Elaboración de código

class hotel:
    def __init__(self, nombre, ubicacion, habitaciones, reservacion):
        self.nombre = nombre
        self.ubicacion = ubicacion
        self.habitaciones = habitaciones
        self.reservacion = reservacion


    def informacion(self):
        return (f"Hotel: {self.nombre}\nubicacion: {self.ubicacion}"
                f"\nHabitaciones: {self.habitaciones}"
                f"\nReservacion: {self.reservacion}")


    def reserve_room(self, cliente, num_habitacion,
                     fecha_apertura, fecha_cierre):
        if (num_habitacion, fecha_apertura,
                fecha_cierre) not in self.reservacion:
            self.reservacion.append((cliente, num_habitacion,
                                      fecha_apertura, fecha_cierre))
            return True
        else:
            return False


    def cancel_reservacion(self, cliente, num_habitacion,
                           fecha_apertura, fecha_cierre):
        reservacion = (cliente, num_habitacion, fecha_apertura, fecha_cierre)
        if reservacion in self.reservacion:
            self.reservacion.remove(reservacion)
            return True
        else:
            return False


class cliente:
    def __init__(self, nombre, email):
        self.nombre = nombre
        self.email = email


    def cancelar(self):
        self.cancelado = True


    def informacion(self):
        return f"Nombre: {self.nombre}\nEmail: {self.email}"


class reservacion:
    def __init__(self, cliente, hotel, num_habitacion,
                 fecha_apertura, fecha_cierre):
        self.cliente = cliente
        self.hotel = hotel
        self.num_habitacion = num_habitacion
        self.fecha_apertura = fecha_apertura
        self.fecha_cierre = fecha_cierre

#Elaboración de testeo

#HOTEL----------------------------------------------------------------------------------------------------------------------------------------------------

#CORRECTAS
class UnittestHotel1(unittest.TestCase):
    def setUp(self):
        self.hotel = hotel("Las Flores", "Mazatlan",
                           5, "Si")

    def testeo_informacion(self):
        mostrar_info = ("Hotel: Las Flores\nubicacion: Mazatlan"
                        "\nHabitaciones: 5\nReservacion: Si")
        self.assertEqual(self.hotel.informacion(), mostrar_info)


class UnittestHotel2(unittest.TestCase):
    def setUp(self):
        self.hotel = hotel("One", "Culiacan",
                           8, "No")

    def testeo_informacion(self):
        mostrar_info = ("Hotel: One\nubicacion: Culiacan"
                        "\nHabitaciones: 8\nReservacion: No")
        self.assertEqual(self.hotel.informacion(), mostrar_info)


#INCORRECTAS
#Error en NO de reservación en lugar de Si
class UnittestHotel3(unittest.TestCase):
    def setUp(self):
        self.hotel = hotel("Las Flores", "Mazatlan",
                           5, "No")

    def testeo_informacion(self):
        mostrar_info = ("Hotel: Las Flores\nubicacion: Mazatlan"
                        "\nHabitaciones: 5\nReservacion: Si")
        self.assertEqual(self.hotel.informacion(), mostrar_info)

#Error en la escritura del nombre del hotel "buenas vista" en lugar de "buena vista"
class UnittestHotel4(unittest.TestCase):
    def setUp(self):
        self.hotel = hotel("Buenas vista", "Queretaro",
                           1, "Si")

    def testeo_informacion(self):
        mostrar_info = ("Hotel: Buena vista\nubicacion: Queretaro"
                        "\nHabitaciones: 1\nReservacion: Si")
        self.assertEqual(self.hotel.informacion(), mostrar_info)


#Error en la ubicación
class UnittestHotel5(unittest.TestCase):
    def setUp(self):
        self.hotel = hotel("Playa dorada", "Mazatlan",
                           1, "Si")

    def testeo_informacion(self):
        mostrar_info = ("Hotel: Playa dorada\nubicacion: Guadalajara"
                        "\nHabitaciones: 1\nReservacion: Si")
        self.assertEqual(self.hotel.informacion(), mostrar_info)


#No se agregó habitaciones
class UnittestHotel6(unittest.TestCase):
    def setUp(self):
        self.hotel = hotel("Playa dorada", "Mazatlan",
                           1, "Si")

    def testeo_informacion(self):
        mostrar_info = ("Hotel: Playa dorada\nubicacion: Guadalajara"
                        "\nHabitaciones: \nReservacion: Si")
        self.assertEqual(self.hotel.informacion(), mostrar_info)

#Cancelación de habitación
class UnittestHotel7(unittest.TestCase):
    def setUp(self):
        self.hotel = hotel("Jarritos", "Yucatan",
                           1, "Si")

    def testeo_informacion(self):
        mostrar_info = ("Hotel: Jarritos\nubicacion: Yucatan"
                        "\nHabitaciones: \nReservacion: Cancelada")
        self.assertEqual(self.hotel.informacion(), mostrar_info)


# Correr testeo
if __name__ == '__main__':
    unittest.main(argv=[''], exit=False)

#Elaboración de testeo

#Cliente----------------------------------------------------------------------------------------------------------------------------------------------------

#CORRECTAS
class UnittestClientes8(unittest.TestCase):
    def setUp(self):
        self.cliente = cliente("Jorge Perez", "perez123@hotmail.com")


    def testeo_informacion(self):
        mostrar_infor = "Nombre: Jorge Perez\nEmail: perez123@hotmail.com"
        self.assertEqual(self.cliente.informacion(), mostrar_infor)


class UnittestClientes9(unittest.TestCase):
    def setUp(self):
        self.cliente = cliente("Julio Gomez", "juliogomez@hotmail.com")


    def testeo_informacion(self):
        mostrar_infor = "Nombre: Julio Gomez\nEmail: juliogomez@hotmail.com"
        self.assertEqual(self.cliente.informacion(), mostrar_infor)

#INCORRECTAS
#Error al introducir nombre
class UnittestClientes10(unittest.TestCase):
    def setUp(self):
        self.cliente = cliente("Alondra Jimenez", "AlJim123@hotmail.com")


    def testeo_informacion(self):
        mostrar_infor = "Nombre: Alondra Gimenez\nEmail: AlJim123@hotmail.com"
        self.assertEqual(self.cliente.informacion(), mostrar_infor)

#Error al introducir Email
class UnittestClientes11(unittest.TestCase):
    def setUp(self):
        self.cliente = cliente("Oscar Sanchez", "so2000@hotmail.com")


    def testeo_informacion(self):
        mostrar_infor = "Nombre: Oscar Sanchez\nEmail: so200@hotmail.com"
        self.assertEqual(self.cliente.informacion(), mostrar_infor)

#Cliente cancelado
class UnittestClientes12(unittest.TestCase):
    def test_cancelacion_cliente_exitosa(self):
        cliente = cliente("Juan Lopez", "jl2102@ejemplo.com")
        resultado = cliente.cancelar()
        self.assertTrue(resultado)

    def test_cancelacion_cliente_inexistente(self):
        cliente_inexistente = cliente("Juan Lopez", "jl2102@ejemplo.com")
        resultado = cliente_inexistente.cancelar()
        self.assertFalse(resultado)

# Correr testeo
if __name__ == '__main__':
    unittest.main(argv=[''], exit=False)

#Elaboración de testeo

#Reservación----------------------------------------------------------------------------------------------------------------------------------------------------

#CORRECTAS
#Creación de reservación
class UnittestReservacion13(unittest.TestCase):
    def setUp(self):
        self.cliente = cliente("Eduardo Salvador", "Sal897@example.com")
        self.hotel = hotel("Rompeolas", "Mazatlan",
                           10, "Si")
        self.reservacion = reservacion(self.cliente, self.hotel,
                                       1, "2024-02-21", "2024-02-25")


    def testeo_informacion(self):
        mostrar_info = ("Hotel: Rompeolas\nubicacion: Mazatlan"
                        "\nHabitaciones: 10\nReservacion: Si"
                        "\nfecha_apertura: 2024-02-21"
                        "\nfecha_cierre: 2024-02-25")
        self.assertEqual(self.reservacion.informacion(), mostrar_info)


# Correr testeo
if __name__ == '__main__':
    unittest.main(argv=[''], exit=False)